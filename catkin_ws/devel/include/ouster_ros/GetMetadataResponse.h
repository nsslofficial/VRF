// Generated by gencpp from file ouster_ros/GetMetadataResponse.msg
// DO NOT EDIT!


#ifndef OUSTER_ROS_MESSAGE_GETMETADATARESPONSE_H
#define OUSTER_ROS_MESSAGE_GETMETADATARESPONSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ouster_ros
{
template <class ContainerAllocator>
struct GetMetadataResponse_
{
  typedef GetMetadataResponse_<ContainerAllocator> Type;

  GetMetadataResponse_()
    : metadata()  {
    }
  GetMetadataResponse_(const ContainerAllocator& _alloc)
    : metadata(_alloc)  {
  (void)_alloc;
    }



   typedef std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>> _metadata_type;
  _metadata_type metadata;





  typedef boost::shared_ptr< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> const> ConstPtr;

}; // struct GetMetadataResponse_

typedef ::ouster_ros::GetMetadataResponse_<std::allocator<void> > GetMetadataResponse;

typedef boost::shared_ptr< ::ouster_ros::GetMetadataResponse > GetMetadataResponsePtr;
typedef boost::shared_ptr< ::ouster_ros::GetMetadataResponse const> GetMetadataResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ouster_ros::GetMetadataResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ouster_ros::GetMetadataResponse_<ContainerAllocator1> & lhs, const ::ouster_ros::GetMetadataResponse_<ContainerAllocator2> & rhs)
{
  return lhs.metadata == rhs.metadata;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ouster_ros::GetMetadataResponse_<ContainerAllocator1> & lhs, const ::ouster_ros::GetMetadataResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ouster_ros

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> const>
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "d37888e5a47bef783c189dec5351027e";
  }

  static const char* value(const ::ouster_ros::GetMetadataResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xd37888e5a47bef78ULL;
  static const uint64_t static_value2 = 0x3c189dec5351027eULL;
};

template<class ContainerAllocator>
struct DataType< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ouster_ros/GetMetadataResponse";
  }

  static const char* value(const ::ouster_ros::GetMetadataResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "string metadata\n"
"\n"
;
  }

  static const char* value(const ::ouster_ros::GetMetadataResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.metadata);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct GetMetadataResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ouster_ros::GetMetadataResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ouster_ros::GetMetadataResponse_<ContainerAllocator>& v)
  {
    s << indent << "metadata: ";
    Printer<std::basic_string<char, std::char_traits<char>, typename std::allocator_traits<ContainerAllocator>::template rebind_alloc<char>>>::stream(s, indent + "  ", v.metadata);
  }
};

} // namespace message_operations
} // namespace ros

#endif // OUSTER_ROS_MESSAGE_GETMETADATARESPONSE_H
